{"version":3,"sources":["file:///D:/cocos/PlayPiano/assets/script/ui/word.ts"],"names":["_decorator","Component","TextAsset","Label","Color","Constant","ccclass","property","word","text","_index","start","node","name","wordOrder","console","log","label","getComponent","color","string","getSong","parseCSV","csvString","lines","split","result","forEach","line","items","push","column","itemGiftText","dataArray","cell","update","deltaTime","getChildByName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAUC,MAAAA,S,OAAAA,S;AAAUC,MAAAA,K,OAAAA,K;AAAWC,MAAAA,K,OAAAA,K;;AAC3CC,MAAAA,Q,iBAAAA,Q;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;sBAGjBQ,I,WADZF,OAAO,CAAC,MAAD,C,UAEHC,QAAQ,CAACL,SAAD,C,2BAFb,MACaM,IADb,SAC0BP,SAD1B,CACoC;AAAA;AAAA;;AAAA;;AAAA,eAGxBQ,IAHwB;AAAA,eAIxBC,MAJwB,GAIV,CAJU;AAAA;;AAKhCC,QAAAA,KAAK,GAAG;AACJ,eAAKC,IAAL,CAAUC,IAAV,GAAe,SAAO;AAAA;AAAA,oCAASC,SAA/B;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,IAAL,CAAUC,IAAtB;AACA,cAAII,KAAK,GAAG,KAAKL,IAAL,CAAUM,YAAV,CAAuBf,KAAvB,CAAZ;AACAc,UAAAA,KAAK,CAACE,KAAN,GAAY,IAAIf,KAAJ,CAAU,CAAV,EAAY,CAAZ,EAAc,CAAd,EAAgB,GAAhB,CAAZ;AACA,eAAKM,MAAL,GAAc;AAAA;AAAA,oCAASI,SAAvB;AACAG,UAAAA,KAAK,CAACG,MAAN,GAAe,KAAKC,OAAL,CAAa,CAAb,EAAe;AAAA;AAAA,oCAASP,SAAT,EAAf,CAAf;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,MAAjB;AAEH;;AACDY,QAAAA,QAAQ,CAACC,SAAD,EAAY;AAChB,cAAIC,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgB,IAAhB,CAAZ;AACA,cAAIC,MAAM,GAAG,EAAb;AACAF,UAAAA,KAAK,CAACG,OAAN,CAAeC,IAAD,IAAU;AACpB,gBAAIC,KAAK,GAAGD,IAAI,CAACH,KAAL,CAAW,IAAX,CAAZ;AACAC,YAAAA,MAAM,CAACI,IAAP,CAAYD,KAAZ;AACH,WAHD;AAIA,iBAAOH,MAAP;AACH;;AACDL,QAAAA,OAAO,CAACO,IAAD,EAAaG,MAAb,EACP;AAAI,eAAKtB,IAAL,GAAY,KAAKuB,YAAL,CAAkBvB,IAA9B,CAAJ,CACG;;AACC,cAAIwB,SAAS,GAAG,KAAKX,QAAL,CAAc,KAAKb,IAAnB,CAAhB;AACA,cAAIyB,IAAJ;AACCA,UAAAA,IAAI,GAAGD,SAAS,CAACL,IAAD,CAAT,CAAgBG,MAAhB,CAAP;AACD,iBAAOG,IAAP;AAEH;;AACDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AAClB,cAAInB,KAAK,GAAG,KAAKL,IAAL,CAAUyB,cAAV,CAAyB,OAAzB,EAAkCnB,YAAlC,CAA+Cf,KAA/C,CAAZ;AACAc,UAAAA,KAAK,CAACE,KAAN,GAAY,IAAIf,KAAJ,CAAU,GAAV,EAAc,CAAd,EAAgB,CAAhB,EAAkB,GAAlB,CAAZ;AAEP;;AArC+B,O;;;;;iBAEN,I","sourcesContent":["import { _decorator, Component,TextAsset,Label,Node,Color } from 'cc';\r\nimport { Constant } from '../framework/Constant';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('word')\r\nexport class word extends Component {\r\n    @property(TextAsset)\r\n    itemGiftText: TextAsset = null;\r\n    private text:string;\r\n    private _index:number=0;\r\n    start() {\r\n        this.node.name='Note'+Constant.wordOrder;\r\n        console.log(this.node.name);\r\n        let label = this.node.getComponent(Label);\r\n        label.color=new Color(0,0,0,255);\r\n        this._index = Constant.wordOrder;\r\n        label.string = this.getSong(0,Constant.wordOrder++);\r\n        console.log(this._index);\r\n\r\n    } \r\n    parseCSV(csvString) {\r\n        let lines = csvString.split('\\n');\r\n        let result = [];\r\n        lines.forEach((line) => {\r\n            let items = line.split('\\t');\r\n            result.push(items);\r\n        });\r\n        return result;\r\n    }\r\n    getSong(line:number,column:number)\r\n    {   this.text = this.itemGiftText.text;\r\n       // console.log(this.text);\r\n        let dataArray = this.parseCSV(this.text);\r\n        let cell:string;\r\n         cell = dataArray[line][column];\r\n        return cell;\r\n\r\n    }\r\n    update(deltaTime: number) {\r\n            let label = this.node.getChildByName(\"Note1\").getComponent(Label);\r\n            label.color=new Color(255,0,0,255);\r\n\r\n    }\r\n}\r\n"]}